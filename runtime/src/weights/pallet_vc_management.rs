// Copyright 2020-2023 Litentry Technologies GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_vc_management`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-16, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `LAPTOP-2LGRO8PK`, CPU: `AMD Ryzen 7 5800H with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("rococo-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/litentry-collator
// benchmark
// pallet
// --chain=rococo-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_vc_management
// --extrinsic=*
// --steps=20
// --repeat=50
// --header=./LICENSE_HEADER
// --output=./runtime/rococo/src/weights/pallet_vc_management.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_vc_management`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vc_management::WeightInfo for WeightInfo<T> {
	// Storage: VCMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn request_vc() -> Weight {
		// Minimum execution time: 19_300 nanoseconds.
		Weight::from_ref_time(19_800_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: VCMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	// Storage: VCManagement VCRegistry (r:1 w:1)
	fn disable_vc() -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(26_600_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VCMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	// Storage: VCManagement VCRegistry (r:1 w:1)
	fn revoke_vc() -> Weight {
		// Minimum execution time: 25_500 nanoseconds.
		Weight::from_ref_time(26_300_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VCManagement VCRegistry (r:1 w:1)
	fn vc_issued() -> Weight {
		// Minimum execution time: 24_200 nanoseconds.
		Weight::from_ref_time(25_300_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn some_error() -> Weight {
		// Minimum execution time: 17_600 nanoseconds.
		Weight::from_ref_time(18_200_000)
	}
	// Storage: VCManagement Admin (r:1 w:1)
	fn set_admin() -> Weight {
		// Minimum execution time: 21_800 nanoseconds.
		Weight::from_ref_time(22_400_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VCManagement Admin (r:1 w:0)
	// Storage: VCManagement SchemaRegistryIndex (r:1 w:1)
	// Storage: VCManagement SchemaRegistry (r:0 w:1)
	fn add_schema() -> Weight {
		// Minimum execution time: 25_500 nanoseconds.
		Weight::from_ref_time(26_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: VCManagement Admin (r:1 w:0)
	// Storage: VCManagement SchemaRegistry (r:1 w:1)
	fn disable_schema() -> Weight {
		// Minimum execution time: 25_600 nanoseconds.
		Weight::from_ref_time(26_800_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VCManagement Admin (r:1 w:0)
	// Storage: VCManagement SchemaRegistry (r:1 w:1)
	fn activate_schema() -> Weight {
		// Minimum execution time: 26_700 nanoseconds.
		Weight::from_ref_time(27_900_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VCManagement Admin (r:1 w:0)
	// Storage: VCManagement SchemaRegistry (r:1 w:1)
	fn revoke_schema() -> Weight {
		// Minimum execution time: 26_700 nanoseconds.
		Weight::from_ref_time(27_400_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VCManagement Admin (r:1 w:0)
	// Storage: VCManagement VCRegistry (r:1 w:1)
	fn add_vc_registry_item() -> Weight {
		// Minimum execution time: 26_000 nanoseconds.
		Weight::from_ref_time(27_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VCManagement Admin (r:1 w:0)
	// Storage: VCManagement VCRegistry (r:1 w:1)
	fn remove_vc_registry_item() -> Weight {
		// Minimum execution time: 25_500 nanoseconds.
		Weight::from_ref_time(26_600_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: VCManagement Admin (r:1 w:0)
	// Storage: VCManagement VCRegistry (r:0 w:5)
	/// The range of component `x` is `[0, 100]`.
	fn clear_vc_registry(x: u32, ) -> Weight {
		// Minimum execution time: 23_400 nanoseconds.
		Weight::from_ref_time(24_170_400)
			// Standard Error: 4_147
			.saturating_add(Weight::from_ref_time(1_051_955).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
}
